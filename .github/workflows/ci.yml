# SPDX-FileCopyrightText: 2022 Bluesy1 <68259537+Bluesy1@users.noreply.github.com>
#
# SPDX-License-Identifier: MIT

name: CI

on:
  push:
    branches:
      - main
    paths:
    - 'charbot/**'
    - 'tests/**'
    - 'charbot_rust/**'
    - 'pyproject.toml'
    - '.github/workflows/ci.yml'
  pull_request:
    types: [ opened, reopened, synchronize ]
    paths:
    - 'charbot/**'
    - 'tests/**'
    - 'charbot_rust/**'
    - 'pyproject.toml'
    - '.github/workflows/ci.yml'

jobs:

  maturin:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
    steps:
      - uses: actions/checkout@v3
      - name: Configure cache
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            charbot_rust/target/
          key: build-cython-${{ hashFiles('**/Cargo.lock') }}
      - uses: messense/maturin-action@v1
        with:
          manylinux: auto
          command: build
          args: --release --sdist -o dist --interpreter /usr/local/bin/python3.11 -m charbot_rust/Cargo.toml
      - name: Upload wheels
        uses: actions/upload-artifact@v3
        with:
          name: wheel
          path: dist
          retention-days: 5
  rust-codecov:
    continue-on-error: true
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions-rs/toolchain@v1
        with:
          toolchain: nightly
          override: true
      - name: Configure cache
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
          key: test-${{ hashFiles('**/Cargo.lock') }}
      - name: Run tests
        run: |
          cd charbot_rust
          curl -L https://github.com/mozilla/grcov/releases/latest/download/grcov-x86_64-unknown-linux-gnu.tar.bz2 | tar jxf -
          rustup component add llvm-tools-preview
          cargo build
          cargo test --no-default-features
          ./grcov . -s . --binary-path ./target/debug/ -t lcov --ignore-not-existing -o ../lcov.info --excl-line "COV_EXCL_LINE" --excl-start "COV_EXCL_START" --excl-stop "COV_EXCL_STOP" --excl-br-line "COV_EXCL_LINE" --excl-br-start "COV_EXCL_START" --excl-br-stop "COV_EXCL_STOP"
        env:
          CARGO_INCREMENTAL: '0'
          RUSTFLAGS: '-Zprofile -Ccodegen-units=1 -Copt-level=0 -Clink-dead-code -Coverflow-checks=off -Zpanic_abort_tests -Cpanic=abort'
          RUSTDOCFLAGS: '-Cpanic=abort'
          LLVM_PROFILE_FILE: 'GHA-%p-%m.profraw'
      - name: Upload coverage report
        uses: codecov/codecov-action@v3.1.1
        with:
          files: ./lcov.info
          env_vars: OS=LINUX,RUST=nightly
          fail_ci_if_error: false
          flags: rust-unit
          name: codecov-umbrella
          verbose: false
          gcov: true
          token: ${{ secrets.CODECOV_TOKEN }}
  black:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.11", "3.10"]
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
      - name: Dependencies
        run: |
          pip install black
      - name: Black
        id: black
        run: black --check --verbose --line-length=120 .
  pyright:
    needs: [maturin, black, flake8]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/download-artifact@v3
        with:
          name: wheel
          path: wheels
      - uses: actions/setup-python@v4
        with:
          python-version: "3.11"
          cache: "pip"
          cache-dependency-path: pyproject.toml
      - name: Dependencies
        run: |
          pip install -U pip
          pip install -U wheel
          pip install -U -e ".[dev]"
          find . -name "*.tar.gz" | xargs rm
          pip install wheels/*
      - name: Run Pyright
        uses: jakebailey/pyright-action@v1
        with:
          warnings: false
  flake8:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.11", "3.10"]
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
      - name: Dependencies
        run: |
          pip install flake8
      - name: Flake8
        id: flake8
        run: flake8 . --max-line-length=120 --indent-size=4
  codecov:
    needs: [maturin, black, flake8]
    runs-on: ubuntu-latest
    continue-on-error: true
    strategy:
      fail-fast: false
    steps:
      - uses: actions/checkout@v3
      - uses: harmon758/postgresql-action@v1
        with:
          postgresql version: '14'
      - uses: actions/download-artifact@v3
        with:
          name: wheel
          path: wheels
      - uses: actions/setup-python@v4
        with:
          python-version: "3.11"
          cache: "pip"
          cache-dependency-path: pyproject.toml
      - name: Dependencies
        run: |
          pip install -U pip
          pip install -U wheel
          pip install -U -e ".[dev]"
          find . -name "*.tar.gz" | xargs rm
          pip install wheels/*
      - name: Run pytest
        id: pytest
        run: pytest --cov-report=xml:coverage/reports/coverage.xml --cov=charbot tests/ --cov-report=term-missing:skip-covered --cov-config=pyproject.toml --cov-branch
      - name: Upload coverage report
        uses: codecov/codecov-action@v3.1.1
        with:
          directory: ./coverage/reports/
          env_vars: OS=LINUX,PYTHON=${{ matrix.python-version }}
          fail_ci_if_error: false
          flags: python-unit
          name: codecov-umbrella
          verbose: false
          token: ${{ secrets.CODECOV_TOKEN }}
